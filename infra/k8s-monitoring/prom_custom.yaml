rbac:
  create: true

podSecurityPolicy:
  enabled: false

imagePullSecrets:

serviceAccounts:
  alertmanager:
    create: true
    name:
  kubeStateMetrics:
    create: true
    name:
  nodeExporter:
    create: true
    name:
  pushgateway:
    create: true
    name:
  server:
    create: true
    name:

alertmanager:
  enabled: true

  name: alertmanager

  image:
    repository: prom/alertmanager
    tag: v0.18.0
    pullPolicy: IfNotPresent

  priorityClassName: ""

  extraArgs: {}

  prefixURL: ""

  baseURL: "/"

  extraEnv: {}

  extraSecretMounts: []

  configMapOverrideName: ""

  configFromSecret: ""

  configFileName: alertmanager.yml

  ingress:
    enabled: false

    annotations: {}

    extraLabels: {}

    hosts: []

    tls: []


  tolerations: []

  nodeSelector: {}

  affinity: {}


  persistentVolume:
    enabled: true

    accessModes:
      - ReadWriteOnce

    annotations: {}

    existingClaim: ""

    mountPath: /data

    size: 2Gi


    subPath: ""

  podAnnotations: {}

  podSecurityPolicy:
    annotations: {}

  replicaCount: 1

  statefulSet:
    enabled: false

    podManagementPolicy: OrderedReady

    headless:
      annotations: {}
      labels: {}


      servicePort: 80

  resources: {}

  securityContext:
    runAsUser: 65534
    runAsNonRoot: true
    runAsGroup: 65534
    fsGroup: 65534

  service:
    annotations: {}
    labels: {}
    clusterIP: ""


    externalIPs: []

    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 80
    type: ClusterIP

configmapReload:
  name: configmap-reload

  image:
    repository: jimmidyson/configmap-reload
    tag: v0.2.2
    pullPolicy: IfNotPresent

  extraArgs: {}
  extraVolumeDirs: []


  extraConfigmapMounts: []


  resources: {}

kubeStateMetrics:
  enabled: true

  name: kube-state-metrics

  image:
    repository: quay.io/coreos/kube-state-metrics
    tag: v1.6.0
    pullPolicy: IfNotPresent

  priorityClassName: ""

  args: {}

  tolerations: []

  nodeSelector: {}

  podAnnotations: {}

  podSecurityPolicy:
    annotations: {}

  pod:
    labels: {}

  replicaCount: 1

  resources: {}

  securityContext:
    runAsUser: 65534
    runAsNonRoot: true

  service:
    annotations:
      prometheus.io/scrape: "true"
    labels: {}

    clusterIP: None

    externalIPs: []

    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 80
    type: ClusterIP

nodeExporter:
  enabled: true

  hostNetwork: true

  hostPID: true

  name: node-exporter

  image:
    repository: prom/node-exporter
    tag: v0.18.0
    pullPolicy: IfNotPresent

  podSecurityPolicy:
    annotations: {}

  priorityClassName: ""

  updateStrategy:
    type: RollingUpdate

  extraArgs: {}

  extraHostPathMounts: []

  extraConfigmapMounts: []

  tolerations: []

  nodeSelector: {}

  podAnnotations: {}

  pod:
    labels: {}

  resources: {}

  securityContext: {}

  service:
    annotations:
      prometheus.io/scrape: "true"
    labels: {}

    clusterIP: None

    externalIPs: []

    hostPort: 9100
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 9100
    type: ClusterIP

server:
  enabled: true
  name: server
  sidecarContainers:

  image:
    repository: prom/prometheus
    tag: v2.11.1
    pullPolicy: IfNotPresent

  priorityClassName: ""

  prefixURL: ""

  baseURL: ""

  env: {}

  enableAdminApi: false

  skipTSDBLock: false

  configPath: /etc/config/prometheus.yml

  global:
    scrape_interval: 30s
    scrape_timeout: 10s
    evaluation_interval: 1m

  extraArgs: {}

  extraVolumeMounts: []

  extraVolumes: []

  extraHostPathMounts: []

  extraConfigmapMounts: []

  extraSecretMounts: []

  configMapOverrideName: ""

  ingress:
    enabled: false

    annotations:
      kubernetes.io/ingress.class: "nginx"
      cert-manager.io/cluster-issuer: letsencrypt-prod
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      kubernetes.io/tls-acme: "true"


    extraLabels: {}

    hosts:
      - prom.kubeplay.website
    tls:
      - hosts:
        - prom.kubeplay.website
        secretName: letsencrypt-prod


  tolerations: []

  nodeSelector: {}

  affinity: {}


  persistentVolume:
    enabled: true

    accessModes:
      - ReadWriteOnce

    annotations: {}

    existingClaim: ""

    mountPath: /data

    size: 16Gi


    subPath: ""

  emptyDir:
    sizeLimit: ""

  podAnnotations: {}

  podLabels: {}

  podSecurityPolicy:
    annotations: {}

  replicaCount: 1

  statefulSet:
    enabled: false

    annotations: {}
    labels: {}
    podManagementPolicy: OrderedReady

    headless:
      annotations: {}
      labels: {}
      servicePort: 80

  resources: {}

  securityContext:
    runAsUser: 65534
    runAsNonRoot: true
    runAsGroup: 65534
    fsGroup: 65534

  service:
    annotations: {}
    labels: {}
    clusterIP: ""

    externalIPs: []

    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 80
    type: ClusterIP

  terminationGracePeriodSeconds: 300

  retention: "30d"

pushgateway:
  enabled: true


  name: pushgateway

  image:
    repository: prom/pushgateway
    tag: v0.8.0
    pullPolicy: IfNotPresent

  priorityClassName: ""

  extraArgs: {}

  ingress:
    enabled: false

    annotations: {}

    hosts: []

    tls: []

  tolerations: []

  nodeSelector: {}

  podAnnotations: {}

  podSecurityPolicy:
    annotations: {}

  replicaCount: 1

  resources: {}

  securityContext:
    runAsUser: 65534
    runAsNonRoot: true

  service:
    annotations:
      prometheus.io/probe: pushgateway
    labels: {}
    clusterIP: ""

    externalIPs: []

    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 9091
    type: ClusterIP

  persistentVolume:
    enabled: false

    accessModes:
      - ReadWriteOnce

    annotations: {}

    existingClaim: ""

    mountPath: /data

    size: 2Gi


    subPath: ""


alertmanagerFiles:
  alertmanager.yml:
    global:
      slack_api_url: 'https://mm.kubeplay.website/hooks/jkikedkqefrfbmndrbk7n5iwno'
    receivers:
      - name: mattermost
        slack_configs:
        - api_url: https://mm.kubeplay.website/hooks/jkikedkqefrfbmndrbk7n5iwno
          title: >-
            {{ range .Alerts }}
              Alert: {{ .Annotations.summary }}
            {{ end }}
          text: >-
            {{ range .Alerts }}
              *Alert:* {{ .Annotations.summary }} - `{{ .Labels.severity }}`
              *Description:* {{ .Annotations.description }}
              *Graph:* <{{ .GeneratorURL }}|:chart_with_upwards_trend:> *Runbook:* <{{ .Annotations.runbook }}|:spiral_note_pad:>
              *Details:*
              {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
              {{ end }}
            {{ end }}
        
    route:
      group_wait: 10s
      group_interval: 5m
      receiver: mattermost
      repeat_interval: 3h

serverFiles:

  alerts: 
    groups:
      - name: Nodes
        rules:
          - alert: InstanceDown
            expr: up{job="kubernetes-nodes"} == 0
            for: 1m
            labels:
              severity: page
            annotations:
              description: '{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 1 minutes.'
              summary: 'Instance {{ $labels.instance }} down'
      - name: symvue-test
        rules:
          - alert: TestEndointsDown
            expr: up{component="web", release="symvue-test"} == 0
            for: 1m
            labels:
              severity: page
            annotations:
              description: 'Test {{ $labels.instance }} of job {{ $labels.job }} has been down for more than 1 minutes.'
              summary: 'Test instance {{ $labels.instance }} down'
      - name: symvue
        rules:
          - alert: TestEndointsDown
            expr: up{component="web", release="symvue"} == 0
            for: 1m
            labels:
              severity: page
            annotations:
              description: '{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 1 minutes.'
              summary: 'Instance {{ $labels.instance }} down'
      - name: symvue-post-count
        rules:
          - alert: Count
            expr: post_count > 5
            for: 1m
            labels:
              severity: page
            annotations:
              description: 'Release {{ $labels.release }} has more then 5 posts'
              summary: 'Release {{ $labels.release }} posts count alert'

  rules: {}

  prometheus.yml:
    rule_files:
      - /etc/config/rules
      - /etc/config/alerts

    scrape_configs:
      - job_name: prometheus
        static_configs:
          - targets:
            - localhost:9090


      - job_name: 'kubernetes-apiservers'

        kubernetes_sd_configs:
          - role: endpoints

        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https

      - job_name: 'kubernetes-nodes'

        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
          - role: node

        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/$1/proxy/metrics


      - job_name: 'kubernetes-nodes-cadvisor'

        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
          - role: node

        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor

      - job_name: 'kubernetes-service-endpoints'

        kubernetes_sd_configs:
          - role: endpoints

        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
            action: replace
            target_label: __scheme__
            regex: (https?)
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
            action: replace
            target_label: __address__
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_name
          - source_labels: [__meta_kubernetes_pod_node_name]
            action: replace
            target_label: kubernetes_node

      - job_name: 'prometheus-pushgateway'
        honor_labels: true

        kubernetes_sd_configs:
          - role: service

        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
            action: keep
            regex: pushgateway

      - job_name: 'kubernetes-services'

        metrics_path: /probe
        params:
          module: [http_2xx]

        kubernetes_sd_configs:
          - role: service

        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
            action: keep
            regex: true
          - source_labels: [__address__]
            target_label: __param_target
          - target_label: __address__
            replacement: blackbox
          - source_labels: [__param_target]
            target_label: instance
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            target_label: kubernetes_name

      - job_name: 'kubernetes-pods'

        kubernetes_sd_configs:
          - role: pod

        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

      - job_name: 'symvue-web-endpoints'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_service_label_component]
            action: keep
            regex: web
          - source_labels: [__meta_kubernetes_namespace]
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            target_label: kubernetes_name

extraScrapeConfigs:

networkPolicy:
  enabled: false
